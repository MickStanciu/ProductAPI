buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

plugins {
    id "java"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "org.springframework.boot" version "2.1.3.RELEASE"
    id "com.moowork.node" version "1.3.1"
    id "application"
}

sourceCompatibility = 11
targetCompatibility = 11
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        output.resourcesDir = "build/classes/java/main"
    }
}

repositories {
    jcenter()
    mavenCentral()
}

ext {
    springBootVersion = '2.1.3.RELEASE'
    junitVersion = '5.4.2'
}

description = 'Web'

group = 'com.example.web'
version = '0.0.1-SNAPSHOT'

node {
    version = '11.13.0'
    yarnVersion = '1.15.2'
    nodeModulesDir = file("src/main/vuejs/frontend")
    download = true
}

dependencies {
    implementation project(':gateway-api-spec')

    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation ("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}")
    implementation ("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation ("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")

    runtimeOnly("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

    testImplementation ("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testImplementation ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: "junit", module: "junit"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

task buildWeb(type: YarnTask) {
    args = ['build']
}

buildWeb.doLast {
    println("BUILDING WEB!!!")
}

task copyWeb(type: Copy) {
    description ('Copies the resource directory to the target directory.')
    from ('src/main/vuejs/frontend/dist')
    into ('build/classes/java/main/generated')
    exclude ('index.html', 'favicon.ico')
}

copyWeb.doLast {
    println("COPY WEB!!!")
}

task deleteWeb(type: Delete) {
    delete ('src/main/vuejs/frontend/dist')
//    delete fileTree('src/main/vuejs/frontend/dist')
}

deleteWeb.doLast {
    println("CLEANING WEB!!!")
}

clean.dependsOn deleteWeb
copyWeb.dependsOn buildWeb
build.dependsOn copyWeb

mainClassName = 'com.example.web.Application'