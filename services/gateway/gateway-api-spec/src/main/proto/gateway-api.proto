syntax = "proto3";
package gateway_api;

option java_multiple_files = true;
option java_package = "com.example.gateway.api.spec.model";

message GWStatisticsDto {
    int32 total_calls = 1;
    int32 selected_calls = 2;
    int32 total_puts = 3;
    int32 selected_puts = 4;
    int32 total_stocks = 5;
    int32 selected_stocks = 6;
    double total_realised_premium = 7;
    double selected_realised_premium = 8;
}

message GWCreateShareJournalDto {
    string symbol = 1;
    string date = 2;
    double price = 3;
    int32 quantity = 4;
    double broker_fees = 5;
    ActionType action = 6;

    enum ActionType {
        UNKNOWN_ACTION_TYPE = 0;
        SELL = 1;
        BUY = 2;
    }
}

message GWShareJournalDto {
    string transaction_id = 1;
    string account_id = 2;
    string date = 3;
    string symbol = 4;
    double price = 5; // the price we actually traded this share
    double actual_price = 6; // comes from PRICE API
    double preferred_price = 7; // comes from SETTINGS, represents a preferred price to close the trade. If not set, will default to actual_price
    int32 quantity = 8;
    double broker_fees = 9;
    bool group_selected = 10;
    bool leg_closed = 11;
    ActionType action = 12;
    TransactionType type = 13;

    enum ActionType {
        UNKNOWN_ACTION_TYPE = 0;
        SELL = 1;
        BUY = 2;
    }

    enum TransactionType {
        UNKNOWN_TRANSACTION_TYPE = 0;
        SHARE = 1;
        SYNTHETIC_SHARE = 2;
    }
}

message GWCreateOptionJournalDto {
    string stock_symbol = 1;
    string date = 2;
    double stock_price = 3;
    double strike_price = 4;
    string expiry_date = 5;
    int32 contracts = 6;
    double premium = 7;
    double broker_fees = 8;
    ActionType action = 9;
    OptionType option_type = 10;

    enum ActionType {
        UNKNOWN_ACTION_TYPE = 0;
        SELL = 1;
        BUY = 2;
    }

    enum OptionType {
        UNKNOWN_OPTION_TYPE = 0;
        PUT = 1;
        CALL = 2;
    }
}

message GWOptionJournalDto {
    string transaction_id = 1;
    string account_id = 2;
    string date = 3;
    string stock_symbol = 4;
    double stock_price = 5;
    double strike_price = 6;
    string expiry_date = 7;
    int32 contracts = 8;
    double premium = 9;
    double broker_fees = 10;
    bool group_selected = 11;
    bool leg_closed = 12;
    ActionType action = 13;
    OptionType option_type = 14;
    TransactionType type = 15;

    enum OptionType {
        UNKNOWN_OPTION_TYPE = 0;
        PUT = 1;
        CALL = 2;
    }

    enum ActionType {
        UNKNOWN_ACTION_TYPE = 0;
        SELL = 1;
        BUY = 2;
    }

    enum TransactionType {
        UNKNOWN_TRANSACTION_TYPE = 0;
        SHARE = 1;
        SYNTHETIC_SHARE = 2;
        OPTION = 3;
        DIVIDEND = 4;
    }
}

message GWCreateDividendJournalDto {
    string date = 1;
    string symbol = 2;
    int32 quantity = 3;
    double dividend = 4;
}

message GWDividendJournalDto {
    string transaction_id = 1;
    string account_id = 2;
    string date = 3;
    string symbol = 4;
    int32 quantity = 5;
    double dividend = 6;
    bool group_selected = 7;
    bool leg_closed = 8;
    TransactionType type = 9;

    enum TransactionType {
        UNKNOWN_TRANSACTION_TYPE = 0;
        SHARE = 1;
        SYNTHETIC_SHARE = 2;
        OPTION = 3;
        DIVIDEND = 4;
    }
}

message GWTradeLogDto {
    repeated GWShareJournalDto share_list = 1;
    repeated GWOptionJournalDto option_list = 2;
    repeated GWDividendJournalDto dividend_list = 3;
    GWStatisticsDto statistics = 4;
}

message GWTradeSummaryResponse {
    repeated GWTradeSummaryDto items = 1;
}

message GWTradeSummaryDto {
    string symbol = 1;
    int32 trades = 2;
    double total = 3;
}

message GWTransactionSettingsDto {
    string transaction_id = 1;
    double preferred_price = 2;
    bool group_selected = 3;
    bool leg_closed = 4;
}

message GWShareDataDto {
    string symbol = 1;
    string last_updated_on = 2;
//    string sector = 3;
    double last_close = 4;
//    double market_capitalization = 5;
//    double pe_ratio = 6;
//    double pe_ratio_future = 7;
//    double book_value = 8;
//    double eps = 9;
//    double eps_future = 10;
//    double finviz_target = 11;
//    double calculated_target = 12;
}

message GWAuthTokenDto {
    string token = 1;
}

// Used to get all symbols traded
message GWActiveSymbolsResponse {
    repeated string symbols = 1;
}
